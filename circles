{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Copy of Welcome To Colaboratory","provenance":[{"file_id":"1nxkSq8h_FGBExdc81RPTVUDtVT21KCdR","timestamp":1590575996732},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1590574083525}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"YumHtmt4i6vQ","colab_type":"code","colab":{}},"source":["import os\n","import cv2 \n","import numpy as np\n","from matplotlib import pyplot as plt\n","from fastai.vision import *\n","from fastai.metrics import error_rate\n","from scipy import ndimage, misc"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LtjX-srVi6fR","colab_type":"code","colab":{}},"source":["f = 'IMG107_3.png'\n","img = cv2.imread(os.path.join('/content/train/3',f))  \n","########################################\n","gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # convert to grayscale\n","blur = cv2.blur(gray, (3, 3)) # blur the image\n","ret, thresh = cv2.threshold(blur, 50, 255, cv2.THRESH_BINARY)\n","# cntCon is the contours of componentnt of the image. a component coald be a circle or overlapeed circles\n","cntCon, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n","# extrcting the overlapped (intesected)areas of the image\n","imgin = img > 102\n","maskin = imgin*img\n","gray = cv2.cvtColor(maskin, cv2.COLOR_BGR2GRAY) # convert to grayscale\n","blur = cv2.blur(gray, (3, 3)) # blur the image\n","ret, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY)\n","#  cntin is the contours of the overlaped(intersected) areas\n","cntin, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n","#######################################\n","# preprocessing of the image remvoving the overlapped areas\n","mask = img <= 102 \n","masked = img*mask\n","\n","mask2 = masked >= 100\n","img2 = masked*mask2\n","size = (4, 4)\n","shape = cv2.MORPH_ELLIPSE\n","kernel = cv2.getStructuringElement(shape, size)\n","min_image = cv2.erode(img2, kernel)\n","kernel = np.ones((2,2),np.uint8)\n","# removing some noise\n","opening = cv2.morphologyEx(img2, cv2.MORPH_OPEN, kernel)\n","imgray = cv2.cvtColor(opening, cv2.COLOR_BGR2GRAY)\n","ret, thresh = cv2.threshold(imgray, 100, 255, 0)\n","# calculating the contours of the image after removing the overlaaped areas\n","contours,hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n","areas = [cv2.contourArea(cnt) for cnt in contours]\n","# in case some 2 circles are conected with point so we can dedcted by the area\n","circles = [1  if x<=266 else x//266 for x in areas]\n","numcirc =sum(circles)\n","# check that the calcuted # of circles  is supposed to be more or equal than num of compnents and intersection parts\n","hypo = len(cntCon) + len(cntin)\n","if numcirc < hypo:\n","  numcirc = hypo \n","if numcirc > 5:\n","  numcirc = 5 \n","\n","print( \"The number of circles in the image is\", numcirc)\n"],"execution_count":0,"outputs":[]}]}